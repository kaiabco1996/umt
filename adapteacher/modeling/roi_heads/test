       (fc2): Linear(in_features=128, out_features=80, bias=True)
        (conf): Linear(in_features=1024, out_features=4, bias=True)
      )
    )
  )
  (D_img): FCDiscriminator_img(
    (conv1): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (conv3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (classifier): Conv2d(128, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (leaky_relu): LeakyReLU(negative_slope=0.2, inplace=True)
  )
)
[08/07 12:01:08 fvcore.common.checkpoint]: Loading checkpoint from detectron2://ImageNetPretrained/MSRA/R-101.pkl
[08/07 12:01:08 d2.checkpoint.c2_model_loading]: Renaming Caffe2 weights ......
[08/07 12:01:08 d2.checkpoint.c2_model_loading]: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint       | Shapes                                         |
|:------------------|:--------------------------|:-----------------------------------------------|
| res2.0.conv1.*    | res2_0_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,1,1)            |
| res2.0.conv2.*    | res2_0_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)            |
| res2.0.conv3.*    | res2_0_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)       |
| res2.0.shortcut.* | res2_0_branch1_{bn_*,w}   | (256,) (256,) (256,) (256,) (256,64,1,1)       |
| res2.1.conv1.*    | res2_1_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)           |
| res2.1.conv2.*    | res2_1_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)            |
| res2.1.conv3.*    | res2_1_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)       |
| res2.2.conv1.*    | res2_2_branch2a_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,256,1,1)           |
| res2.2.conv2.*    | res2_2_branch2b_{bn_*,w}  | (64,) (64,) (64,) (64,) (64,64,3,3)            |
| res2.2.conv3.*    | res2_2_branch2c_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,64,1,1)       |
| res3.0.conv1.*    | res3_0_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,256,1,1)      |
| res3.0.conv2.*    | res3_0_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)      |
| res3.0.conv3.*    | res3_0_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)      |
| res3.0.shortcut.* | res3_0_branch1_{bn_*,w}   | (512,) (512,) (512,) (512,) (512,256,1,1)      |
| res3.1.conv1.*    | res3_1_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)      |
| res3.1.conv2.*    | res3_1_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)      |
| res3.1.conv3.*    | res3_1_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)      |
| res3.2.conv1.*    | res3_2_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)      |
| res3.2.conv2.*    | res3_2_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)      |
| res3.2.conv3.*    | res3_2_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)      |
| res3.3.conv1.*    | res3_3_branch2a_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,512,1,1)      |
| res3.3.conv2.*    | res3_3_branch2b_{bn_*,w}  | (128,) (128,) (128,) (128,) (128,128,3,3)      |
| res3.3.conv3.*    | res3_3_branch2c_{bn_*,w}  | (512,) (512,) (512,) (512,) (512,128,1,1)      |
| res4.0.conv1.*    | res4_0_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,512,1,1)      |
| res4.0.conv2.*    | res4_0_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.0.conv3.*    | res4_0_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.0.shortcut.* | res4_0_branch1_{bn_*,w}   | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1) |
| res4.1.conv1.*    | res4_1_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.1.conv2.*    | res4_1_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.1.conv3.*    | res4_1_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.10.conv1.*   | res4_10_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.10.conv2.*   | res4_10_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.10.conv3.*   | res4_10_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.11.conv1.*   | res4_11_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.11.conv2.*   | res4_11_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.11.conv3.*   | res4_11_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.12.conv1.*   | res4_12_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.12.conv2.*   | res4_12_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.12.conv3.*   | res4_12_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.13.conv1.*   | res4_13_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.13.conv2.*   | res4_13_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.13.conv3.*   | res4_13_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.14.conv1.*   | res4_14_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.14.conv2.*   | res4_14_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.14.conv3.*   | res4_14_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.15.conv1.*   | res4_15_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.15.conv2.*   | res4_15_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.15.conv3.*   | res4_15_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.16.conv1.*   | res4_16_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.16.conv2.*   | res4_16_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.16.conv3.*   | res4_16_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.17.conv1.*   | res4_17_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.17.conv2.*   | res4_17_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.17.conv3.*   | res4_17_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.18.conv1.*   | res4_18_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.18.conv2.*   | res4_18_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.18.conv3.*   | res4_18_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.19.conv1.*   | res4_19_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.19.conv2.*   | res4_19_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.19.conv3.*   | res4_19_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.2.conv1.*    | res4_2_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.2.conv2.*    | res4_2_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.2.conv3.*    | res4_2_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.20.conv1.*   | res4_20_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.20.conv2.*   | res4_20_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.20.conv3.*   | res4_20_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.21.conv1.*   | res4_21_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.21.conv2.*   | res4_21_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.21.conv3.*   | res4_21_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.22.conv1.*   | res4_22_branch2a_{bn_*,w} | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.22.conv2.*   | res4_22_branch2b_{bn_*,w} | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.22.conv3.*   | res4_22_branch2c_{bn_*,w} | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.3.conv1.*    | res4_3_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.3.conv2.*    | res4_3_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.3.conv3.*    | res4_3_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.4.conv1.*    | res4_4_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.4.conv2.*    | res4_4_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.4.conv3.*    | res4_4_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.5.conv1.*    | res4_5_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.5.conv2.*    | res4_5_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.5.conv3.*    | res4_5_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.6.conv1.*    | res4_6_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.6.conv2.*    | res4_6_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.6.conv3.*    | res4_6_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.7.conv1.*    | res4_7_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.7.conv2.*    | res4_7_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.7.conv3.*    | res4_7_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.8.conv1.*    | res4_8_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.8.conv2.*    | res4_8_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.8.conv3.*    | res4_8_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| res4.9.conv1.*    | res4_9_branch2a_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,1024,1,1)     |
| res4.9.conv2.*    | res4_9_branch2b_{bn_*,w}  | (256,) (256,) (256,) (256,) (256,256,3,3)      |
| res4.9.conv3.*    | res4_9_branch2c_{bn_*,w}  | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1) |
| stem.conv1.norm.* | res_conv1_bn_*            | (64,) (64,) (64,) (64,)                        |
| stem.conv1.weight | conv1_w                   | (64, 3, 7, 7)                                  |
proposal_conf_deltas tensor([[1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.]], device='cuda:0', grad_fn=<SigmoidBackward>)
loss_box_reg: tensor([[6.9614e-03, 1.7821e-02, 1.3668e-02, 4.7812e-03],
        [4.0066e-02, 1.5695e-02, 2.1054e-03, 1.4774e-03],
        [1.8836e-02, 3.0615e-03, 6.7661e-03, 1.7026e-03],
        [2.6264e-02, 3.2557e-02, 7.8308e-03, 2.4181e-02],
        [2.4259e-02, 2.4290e-02, 3.2056e-02, 4.7517e-02],
        [1.3723e-03, 3.0532e-04, 4.9925e-03, 8.3828e-03],
        [6.1184e-03, 1.5852e-02, 8.7844e-03, 5.1542e-03],
        [2.3851e-02, 4.4442e-03, 1.6723e-02, 1.1489e-02],
        [4.0195e-03, 4.5602e-03, 3.6951e-03, 1.1137e-02],
        [7.5697e-03, 4.3412e-03, 4.1421e-04, 1.0835e-03],
        [1.0689e-02, 2.5600e-03, 3.8409e-02, 5.6697e-02],
        [8.5420e-03, 1.9038e-03, 1.3288e-03, 7.5295e-03],
        [3.1398e-02, 1.0099e-02, 4.4881e-03, 2.1167e-02],
        [3.8650e-02, 1.7666e-02, 1.0967e-02, 3.4200e-02],
        [7.9614e-03, 5.6675e-03, 4.5077e-03, 5.5602e-03],
        [2.1453e-03, 1.9422e-02, 3.9238e-04, 4.9171e-03],
        [1.1867e-02, 4.1947e-02, 3.3466e-02, 1.1551e-02],
        [1.1204e-02, 4.7840e-03, 1.1863e-02, 1.2916e-02],
        [9.5731e-03, 3.6576e-03, 1.5480e-02, 7.8516e-03],
        [1.2533e-02, 9.4551e-03, 6.9807e-03, 1.1345e-02],
        [1.8218e-03, 1.2296e-02, 2.0174e-03, 1.2119e-02],
        [9.0021e-03, 1.0318e-02, 4.3000e-03, 4.7274e-03],
        [5.5531e-03, 2.2984e-03, 5.9141e-04, 1.6426e-02],
        [1.3131e-02, 1.3992e-02, 3.5978e-03, 1.1262e-02],
        [9.1196e-03, 1.3022e-03, 4.1452e-03, 3.5876e-03],
        [1.6486e-02, 7.9193e-03, 8.2727e-03, 1.0371e-02],
        [2.5976e-03, 7.1031e-03, 1.2024e-03, 3.4924e-03],
        [1.3265e-02, 4.3261e-03, 1.4891e-03, 1.0300e-02],
        [1.3993e-03, 4.5392e-03, 8.4656e-04, 7.0207e-03],
        [1.3162e-02, 1.9730e-03, 8.3973e-03, 1.7278e-02],
        [7.0656e-03, 1.0157e-02, 1.5294e-03, 3.7898e-03],
        [9.5218e-03, 1.2373e-04, 6.7143e-03, 8.6162e-03],
        [1.6425e-02, 8.1421e-03, 8.6188e-03, 3.1260e-02],
        [9.5675e-03, 1.7295e-03, 7.2672e-03, 1.0366e-02],
        [7.1281e-03, 1.3292e-02, 5.5151e-03, 1.6192e-02],
        [5.1564e-04, 4.1640e-05, 1.2498e-02, 1.7675e-02]], device='cuda:0',
       grad_fn=<AbsBackward>)
proposal_conf_deltas tensor([[1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [0., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.]], device='cuda:1', grad_fn=<SigmoidBackward>)
conf: tensor([[1., 0., 1., 0.],
        [1., 0., 1., 1.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 0.],
        [1., 0., 1., 1.],
        [1., 0., 1., 0.],
        [1., 1., 1., 1.],
        [1., 1., 1., 0.],
        [1., 0., 1., 1.],
        [1., 1., 1., 0.],
        [1., 0., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 0., 1., 0.],
        [1., 1., 1., 1.],
        [1., 0., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 0.],
        [1., 0., 1., 0.],
        [1., 1., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 1., 1., 1.],
        [1., 0., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 0.],
        [1., 1., 1., 1.],
        [1., 1., 1., 0.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 0., 1., 0.],
        [1., 1., 1., 0.]], device='cuda:0', grad_fn=<AddBackward0>)
conf_mean: tensor([0.5000, 0.7500, 0.5000, 0.5000, 1.0000, 1.0000, 0.7500, 0.7500, 0.5000,
        1.0000, 0.7500, 0.7500, 0.7500, 0.7500, 1.0000, 1.0000, 0.5000, 1.0000,
        0.7500, 1.0000, 0.7500, 0.5000, 0.7500, 0.5000, 0.5000, 1.0000, 0.7500,
        1.0000, 1.0000, 0.7500, 1.0000, 0.7500, 1.0000, 1.0000, 0.5000, 0.7500],
       device='cuda:0', grad_fn=<MeanBackward1>)
loss_box_reg: tensor([[0.0200, 0.0138, 0.0135, 0.0114],
        [0.0039, 0.0328, 0.0138, 0.0468],
        [0.0147, 0.0022, 0.0167, 0.0253],
        [0.0008, 0.0103, 0.0094, 0.0230],
        [0.0065, 0.0155, 0.0119, 0.0023],
        [0.0107, 0.0242, 0.0074, 0.0187],
        [0.0190, 0.0032, 0.0051, 0.0275],
        [0.0232, 0.0075, 0.0151, 0.0225],
        [0.0189, 0.0138, 0.0064, 0.0211],
        [0.0082, 0.0202, 0.0029, 0.0345],
        [0.0286, 0.0078, 0.0106, 0.0248],
        [0.0274, 0.0049, 0.0058, 0.0355],
        [0.0191, 0.0114, 0.0045, 0.0176],
        [0.0012, 0.0087, 0.0094, 0.0497],
        [0.0098, 0.0148, 0.0057, 0.0419],
        [0.0317, 0.0014, 0.0116, 0.0371],
        [0.0105, 0.0088, 0.0010, 0.0094],
        [0.0065, 0.0080, 0.0006, 0.0229],
        [0.0008, 0.0036, 0.0047, 0.0131],
        [0.0086, 0.0033, 0.0004, 0.0035],
        [0.0022, 0.0049, 0.0071, 0.0113],
        [0.0140, 0.0013, 0.0191, 0.0191],
        [0.0207, 0.0066, 0.0071, 0.0205],
        [0.0146, 0.0036, 0.0055, 0.0090],
        [0.0030, 0.0215, 0.0231, 0.0240],
        [0.0015, 0.0052, 0.0101, 0.0204],
        [0.0026, 0.0087, 0.0115, 0.0210],
        [0.0184, 0.0043, 0.0061, 0.0060],
        [0.0140, 0.0055, 0.0120, 0.0164],
        [0.0131, 0.0050, 0.0140, 0.0159],
        [0.0219, 0.0024, 0.0063, 0.0002],
        [0.0151, 0.0164, 0.0139, 0.0136],
        [0.0066, 0.0100, 0.0119, 0.0304],
        [0.0038, 0.0158, 0.0048, 0.0161]], device='cuda:1',
       grad_fn=<AbsBackward>)
loss_box: tensor([[1.9337e-04, 4.9504e-04, 3.7967e-04, 1.3281e-04],
        [1.1129e-03, 4.3598e-04, 5.8483e-05, 4.1038e-05],
        [5.2321e-04, 8.5041e-05, 1.8795e-04, 4.7295e-05],
        [7.2957e-04, 9.0436e-04, 2.1752e-04, 6.7168e-04],
        [6.7386e-04, 6.7472e-04, 8.9044e-04, 1.3199e-03],
        [3.8118e-05, 8.4810e-06, 1.3868e-04, 2.3286e-04],
        [1.6996e-04, 4.4034e-04, 2.4401e-04, 1.4317e-04],
        [6.6252e-04, 1.2345e-04, 4.6454e-04, 3.1914e-04],
        [1.1165e-04, 1.2667e-04, 1.0264e-04, 3.0936e-04],
        [2.1027e-04, 1.2059e-04, 1.1506e-05, 3.0096e-05],
        [2.9692e-04, 7.1111e-05, 1.0669e-03, 1.5749e-03],
        [2.3728e-04, 5.2882e-05, 3.6912e-05, 2.0915e-04],
        [8.7216e-04, 2.8052e-04, 1.2467e-04, 5.8797e-04],
        [1.0736e-03, 4.9073e-04, 3.0463e-04, 9.5001e-04],
        [2.2115e-04, 1.5743e-04, 1.2521e-04, 1.5445e-04],
        [5.9591e-05, 5.3950e-04, 1.0899e-05, 1.3659e-04],
        [3.2965e-04, 1.1652e-03, 9.2962e-04, 3.2085e-04],
        [3.1122e-04, 1.3289e-04, 3.2951e-04, 3.5878e-04],
        [2.6592e-04, 1.0160e-04, 4.2999e-04, 2.1810e-04],
        [3.4813e-04, 2.6264e-04, 1.9391e-04, 3.1514e-04],
        [5.0605e-05, 3.4157e-04, 5.6038e-05, 3.3665e-04],
        [2.5006e-04, 2.8662e-04, 1.1944e-04, 1.3132e-04],
        [1.5425e-04, 6.3844e-05, 1.6428e-05, 4.5628e-04],
        [3.6474e-04, 3.8867e-04, 9.9939e-05, 3.1283e-04],
        [2.5332e-04, 3.6173e-05, 1.1514e-04, 9.9657e-05],
        [4.5794e-04, 2.1998e-04, 2.2980e-04, 2.8807e-04],
        [7.2154e-05, 1.9731e-04, 3.3400e-05, 9.7010e-05],
        [3.6848e-04, 1.2017e-04, 4.1363e-05, 2.8611e-04],
        [3.8870e-05, 1.2609e-04, 2.3515e-05, 1.9502e-04],
        [3.6561e-04, 5.4806e-05, 2.3326e-04, 4.7995e-04],
        [1.9627e-04, 2.8214e-04, 4.2484e-05, 1.0527e-04],
        [2.6449e-04, 3.4370e-06, 1.8651e-04, 2.3934e-04],
        [4.5625e-04, 2.2617e-04, 2.3941e-04, 8.6834e-04],
        [2.6576e-04, 4.8042e-05, 2.0187e-04, 2.8794e-04],
        [1.9800e-04, 3.6922e-04, 1.5320e-04, 4.4978e-04],
        [1.4323e-05, 1.1567e-06, 3.4717e-04, 4.9096e-04]], device='cuda:0',
       grad_fn=<DivBackward0>)
result: tensor(0.0329, device='cuda:0', grad_fn=<SumBackward0>)
{'loss_cls': tensor(404432.3750, device='cuda:0', grad_fn=<MulBackward0>), 'loss_box_reg': tensor(0.0329, device='cuda:0', grad_fn=<MulBackward0>), 'loss_conf': tensor(0.6931, device='cuda:0', grad_fn=<MulBackward0>), 'loss_rpn_cls': tensor(82285.6953, device='cuda:0', grad_fn=<MulBackward0>), 'loss_rpn_loc': tensor(53958.1016, device='cuda:0', grad_fn=<MulBackward0>), 'loss_D_img_s': tensor(0., device='cuda:0', grad_fn=<MulBackward0>)}
conf: tensor([[1., 0., 1., 0.],
        [1., 1., 1., 0.],
        [1., 0., 1., 1.],
        [1., 1., 1., 0.],
        [1., 1., 1., 0.],
        [1., 1., 1., 0.],
        [1., 0., 1., 0.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 0., 1., 1.],
        [1., 1., 1., 1.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 1., 1., 1.],
        [1., 0., 1., 0.],
        [1., 1., 1., 1.],
        [1., 1., 1., 0.],
        [1., 1., 1., 1.],
        [1., 0., 1., 1.],
        [1., 0., 1., 0.],
        [1., 1., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 1., 1., 1.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 0., 1., 0.],
        [1., 1., 1., 1.]], device='cuda:1', grad_fn=<AddBackward0>)
conf_mean: tensor([0.5000, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.5000, 1.0000, 1.0000,
        0.7500, 1.0000, 0.5000, 0.5000, 0.5000, 0.5000, 1.0000, 0.5000, 1.0000,
        0.7500, 1.0000, 0.7500, 0.5000, 0.7500, 0.5000, 0.5000, 1.0000, 0.5000,
        0.5000, 0.7500, 1.0000, 1.0000, 1.0000, 0.5000, 1.0000],
       device='cuda:1', grad_fn=<MeanBackward1>)
loss_box: tensor([[5.8742e-04, 4.0581e-04, 3.9788e-04, 3.3443e-04],
        [1.1522e-04, 9.6379e-04, 4.0561e-04, 1.3775e-03],
        [4.3095e-04, 6.5073e-05, 4.9139e-04, 7.4515e-04],
        [2.3103e-05, 3.0307e-04, 2.7534e-04, 6.7604e-04],
        [1.9091e-04, 4.5485e-04, 3.4952e-04, 6.6554e-05],
        [3.1342e-04, 7.1037e-04, 2.1888e-04, 5.4876e-04],
        [5.5808e-04, 9.4836e-05, 1.5018e-04, 8.0799e-04],
        [6.8138e-04, 2.2126e-04, 4.4295e-04, 6.6275e-04],
        [5.5719e-04, 4.0484e-04, 1.8819e-04, 6.2196e-04],
        [2.4112e-04, 5.9418e-04, 8.5262e-05, 1.0147e-03],
        [8.4149e-04, 2.2814e-04, 3.1259e-04, 7.2932e-04],
        [8.0554e-04, 1.4439e-04, 1.7025e-04, 1.0438e-03],
        [5.6209e-04, 3.3492e-04, 1.3184e-04, 5.1900e-04],
        [3.5357e-05, 2.5695e-04, 2.7617e-04, 1.4618e-03],
        [2.8799e-04, 4.3433e-04, 1.6678e-04, 1.2335e-03],
        [9.3243e-04, 4.2449e-05, 3.4064e-04, 1.0919e-03],
        [3.0892e-04, 2.5965e-04, 2.8087e-05, 2.7558e-04],
        [1.9194e-04, 2.3433e-04, 1.8895e-05, 6.7367e-04],
        [2.4282e-05, 1.0567e-04, 1.3781e-04, 3.8421e-04],
        [2.5231e-04, 9.6127e-05, 1.0949e-05, 1.0320e-04],
        [6.5266e-05, 1.4548e-04, 2.0882e-04, 3.3110e-04],
        [4.1233e-04, 3.9494e-05, 5.6154e-04, 5.6032e-04],
        [6.0908e-04, 1.9523e-04, 2.0955e-04, 6.0388e-04],
        [4.2966e-04, 1.0600e-04, 1.6069e-04, 2.6515e-04],
        [8.8258e-05, 6.3192e-04, 6.8080e-04, 7.0473e-04],
        [4.5160e-05, 1.5195e-04, 2.9812e-04, 6.0143e-04],
        [7.5680e-05, 2.5542e-04, 3.3946e-04, 6.1637e-04],
        [5.3974e-04, 1.2636e-04, 1.7915e-04, 1.7687e-04],
        [4.1207e-04, 1.6137e-04, 3.5182e-04, 4.8194e-04],
        [3.8426e-04, 1.4664e-04, 4.1276e-04, 4.6746e-04],
        [6.4305e-04, 6.9704e-05, 1.8600e-04, 4.7965e-06],
        [4.4311e-04, 4.8247e-04, 4.0774e-04, 3.9961e-04],
        [1.9536e-04, 2.9445e-04, 3.5086e-04, 8.9504e-04],
        [1.1076e-04, 4.6554e-04, 1.4112e-04, 4.7367e-04]], device='cuda:1',
       grad_fn=<DivBackward0>)
result: tensor(0.0379, device='cuda:1', grad_fn=<SumBackward0>)
{'loss_cls': tensor(550203.5625, device='cuda:1', grad_fn=<MulBackward0>), 'loss_box_reg': tensor(0.0379, device='cuda:1', grad_fn=<MulBackward0>), 'loss_conf': tensor(0.7080, device='cuda:1', grad_fn=<MulBackward0>), 'loss_rpn_cls': tensor(98491.8750, device='cuda:1', grad_fn=<MulBackward0>), 'loss_rpn_loc': tensor(172046.5469, device='cuda:1', grad_fn=<MulBackward0>), 'loss_D_img_s': tensor(0., device='cuda:1', grad_fn=<MulBackward0>)}
proposal_conf_deltas tensor([[0., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.]], device='cuda:2', grad_fn=<SigmoidBackward>)
loss_box_reg: tensor([[0.0006, 0.0223, 0.0173, 0.0178],
        [0.0010, 0.0115, 0.0055, 0.0195],
        [0.0040, 0.0127, 0.0046, 0.0485],
        [0.0034, 0.0033, 0.0164, 0.0117],
        [0.0036, 0.0020, 0.0078, 0.0312],
        [0.0077, 0.0024, 0.0077, 0.0112],
        [0.0388, 0.0085, 0.0174, 0.0204],
        [0.0046, 0.0169, 0.0139, 0.0292],
        [0.0397, 0.0079, 0.0166, 0.0053],
        [0.0050, 0.0146, 0.0048, 0.0289],
        [0.0022, 0.0048, 0.0087, 0.0077],
        [0.0022, 0.0042, 0.0015, 0.0173],
        [0.0249, 0.0042, 0.0097, 0.0144],
        [0.0105, 0.0036, 0.0126, 0.0117],
        [0.0184, 0.0113, 0.0041, 0.0050],
        [0.0028, 0.0110, 0.0018, 0.0123],
        [0.0225, 0.0060, 0.0255, 0.0135],
        [0.0087, 0.0012, 0.0030, 0.0203],
        [0.0033, 0.0106, 0.0004, 0.0214],
        [0.0083, 0.0115, 0.0001, 0.0131],
        [0.0151, 0.0070, 0.0245, 0.0086],
        [0.0095, 0.0002, 0.0090, 0.0026],
        [0.0108, 0.0001, 0.0096, 0.0034],
        [0.0069, 0.0148, 0.0128, 0.0284],
        [0.0123, 0.0021, 0.0090, 0.0187],
        [0.0192, 0.0181, 0.0105, 0.0081]], device='cuda:2',
       grad_fn=<AbsBackward>)
conf: tensor([[0., 0., 1., 1.],
        [1., 0., 1., 1.],
        [1., 0., 1., 1.],
        [1., 1., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 1., 1., 0.],
        [1., 1., 1., 1.],
        [1., 1., 1., 0.],
        [1., 1., 1., 1.],
        [1., 1., 1., 0.],
        [1., 1., 1., 1.],
        [1., 0., 1., 1.],
        [1., 1., 1., 0.],
        [1., 1., 1., 0.],
        [1., 0., 1., 1.],
        [1., 0., 1., 0.],
        [1., 0., 1., 0.],
        [1., 0., 1., 1.],
        [1., 1., 1., 1.],
        [1., 0., 1., 0.],
        [1., 0., 1., 1.],
        [1., 0., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 0.]], device='cuda:2', grad_fn=<AddBackward0>)
conf_mean: tensor([0.5000, 0.7500, 0.7500, 0.7500, 0.5000, 0.5000, 0.7500, 1.0000, 0.7500,
        1.0000, 0.7500, 1.0000, 0.7500, 0.7500, 0.7500, 0.7500, 0.5000, 0.5000,
        0.7500, 1.0000, 0.5000, 0.7500, 0.7500, 1.0000, 1.0000, 0.7500],
       device='cuda:2', grad_fn=<MeanBackward1>)
loss_box: tensor([[2.3074e-05, 8.5723e-04, 6.6643e-04, 6.8376e-04],
        [3.9818e-05, 4.4218e-04, 2.1299e-04, 7.4905e-04],
        [1.5536e-04, 4.8668e-04, 1.7535e-04, 1.8641e-03],
        [1.3143e-04, 1.2616e-04, 6.3162e-04, 4.5135e-04],
        [1.3848e-04, 7.7710e-05, 3.0117e-04, 1.2005e-03],
        [2.9670e-04, 9.3977e-05, 2.9717e-04, 4.3234e-04],
        [1.4920e-03, 3.2730e-04, 6.6999e-04, 7.8633e-04],
        [1.7748e-04, 6.5179e-04, 5.3322e-04, 1.1245e-03],
        [1.5285e-03, 3.0470e-04, 6.3706e-04, 2.0280e-04],
        [1.9137e-04, 5.6075e-04, 1.8465e-04, 1.1109e-03],
        [8.5734e-05, 1.8645e-04, 3.3308e-04, 2.9602e-04],
        [8.4801e-05, 1.5999e-04, 5.6441e-05, 6.6529e-04],
        [9.5720e-04, 1.6283e-04, 3.7117e-04, 5.5474e-04],
        [4.0303e-04, 1.3949e-04, 4.8366e-04, 4.5190e-04],
        [7.0742e-04, 4.3392e-04, 1.5628e-04, 1.9288e-04],
        [1.0780e-04, 4.2272e-04, 6.7409e-05, 4.7454e-04],
        [8.6350e-04, 2.3258e-04, 9.8259e-04, 5.2023e-04],
        [3.3589e-04, 4.7977e-05, 1.1482e-04, 7.8105e-04],
        [1.2548e-04, 4.0613e-04, 1.4150e-05, 8.2209e-04],
        [3.1783e-04, 4.4153e-04, 4.4328e-06, 5.0534e-04],
        [5.8054e-04, 2.6761e-04, 9.4242e-04, 3.3047e-04],
        [3.6388e-04, 8.0390e-06, 3.4633e-04, 1.0117e-04],
        [4.1473e-04, 4.1753e-06, 3.6826e-04, 1.2961e-04],
        [2.6352e-04, 5.6960e-04, 4.9133e-04, 1.0918e-03],
        [4.7459e-04, 7.9724e-05, 3.4618e-04, 7.2073e-04],
        [7.3750e-04, 6.9526e-04, 4.0504e-04, 3.1260e-04]], device='cuda:2',
       grad_fn=<DivBackward0>)
result: tensor(0.0341, device='cuda:2', grad_fn=<SumBackward0>)
{'loss_cls': tensor(533869.0625, device='cuda:2', grad_fn=<MulBackward0>), 'loss_box_reg': tensor(0.0341, device='cuda:2', grad_fn=<MulBackward0>), 'loss_conf': tensor(0.7126, device='cuda:2', grad_fn=<MulBackward0>), 'loss_rpn_cls': tensor(109826.0391, device='cuda:2', grad_fn=<MulBackward0>), 'loss_rpn_loc': tensor(56931.0078, device='cuda:2', grad_fn=<MulBackward0>), 'loss_D_img_s': tensor(0., device='cuda:2', grad_fn=<MulBackward0>)}
ERROR:adapteacher.engine.trainer:Exception during training:
Traceback (most recent call last):
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/engine/trainer.py", line 404, in train_loop
    self.run_step_full_semisup()
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/engine/trainer.py", line 513, in run_step_full_semisup
    label_data_q, branch="supervised")
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/parallel/distributed.py", line 705, in forward
    output = self.module(*inputs[0], **kwargs[0])
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/modeling/meta_arch/rcnn.py", line 225, in forward
    images, features, gt_instances
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/modeling/proposal_generator/rpn.py", line 53, in forward
    anchors, pred_objectness_logits, pred_anchor_deltas, images.image_sizes
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/detectron2/modeling/proposal_generator/rpn.py", line 470, in predict_proposals
    self.training,
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py", line 104, in find_top_rpn_proposals
    "Predicted boxes or scores contain Inf/NaN. Training has diverged."
FloatingPointError: Predicted boxes or scores contain Inf/NaN. Training has diverged.
[08/07 12:01:21 d2.engine.hooks]: Total training time: 0:00:00 (0:00:00 on hooks)
ERROR:adapteacher.engine.trainer:Exception during training:
Traceback (most recent call last):
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/engine/trainer.py", line 404, in train_loop
    self.run_step_full_semisup()
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/engine/trainer.py", line 513, in run_step_full_semisup
    label_data_q, branch="supervised")
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/parallel/distributed.py", line 705, in forward
    output = self.module(*inputs[0], **kwargs[0])
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/modeling/meta_arch/rcnn.py", line 225, in forward
    images, features, gt_instances
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/modeling/proposal_generator/rpn.py", line 53, in forward
    anchors, pred_objectness_logits, pred_anchor_deltas, images.image_sizes
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/detectron2/modeling/proposal_generator/rpn.py", line 470, in predict_proposals
    self.training,
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py", line 104, in find_top_rpn_proposals
    "Predicted boxes or scores contain Inf/NaN. Training has diverged."
FloatingPointError: Predicted boxes or scores contain Inf/NaN. Training has diverged.
[08/07 12:01:21 d2.utils.events]:  iter: 1  total_loss: 6.873e+05  loss_cls: 4.962e+05  loss_box_reg: 0.03498  loss_conf: 0.7046  loss_rpn_cls: 9.687e+04  loss_rpn_loc: 9.431e+04  loss_D_img_s: 0  data_time: 12.4252  lr: 1e-05  max_mem: 3048M
ERROR:adapteacher.engine.trainer:Exception during training:
Traceback (most recent call last):
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/engine/trainer.py", line 404, in train_loop
    self.run_step_full_semisup()
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/engine/trainer.py", line 513, in run_step_full_semisup
    label_data_q, branch="supervised")
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/parallel/distributed.py", line 705, in forward
    output = self.module(*inputs[0], **kwargs[0])
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/modeling/meta_arch/rcnn.py", line 225, in forward
    images, features, gt_instances
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/modeling/proposal_generator/rpn.py", line 53, in forward
    anchors, pred_objectness_logits, pred_anchor_deltas, images.image_sizes
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/detectron2/modeling/proposal_generator/rpn.py", line 470, in predict_proposals
    self.training,
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py", line 104, in find_top_rpn_proposals
    "Predicted boxes or scores contain Inf/NaN. Training has diverged."
FloatingPointError: Predicted boxes or scores contain Inf/NaN. Training has diverged.
Traceback (most recent call last):
  File "train_net.py", line 79, in <module>
    args=(args,),
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/detectron2/engine/launch.py", line 59, in launch
    daemon=False,
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/multiprocessing/spawn.py", line 230, in spawn
    return start_processes(fn, args, nprocs, join, daemon, start_method='spawn')
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/multiprocessing/spawn.py", line 188, in start_processes
    while not context.join():
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/multiprocessing/spawn.py", line 150, in join
    raise ProcessRaisedException(msg, error_index, failed_process.pid)
torch.multiprocessing.spawn.ProcessRaisedException: 

-- Process 1 terminated with the following error:
Traceback (most recent call last):
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/multiprocessing/spawn.py", line 59, in _wrap
    fn(i, *args)
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/detectron2/engine/launch.py", line 94, in _distributed_worker
    main_func(*args)
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/train_net.py", line 66, in main
    return trainer.train()
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/engine/trainer.py", line 386, in train
    self.train_loop(self.start_iter, self.max_iter)
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/engine/trainer.py", line 404, in train_loop
    self.run_step_full_semisup()
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/engine/trainer.py", line 513, in run_step_full_semisup
    label_data_q, branch="supervised")
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/parallel/distributed.py", line 705, in forward
    output = self.module(*inputs[0], **kwargs[0])
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/modeling/meta_arch/rcnn.py", line 225, in forward
    images, features, gt_instances
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/home/karthik/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher/adapteacher/modeling/proposal_generator/rpn.py", line 53, in forward
    anchors, pred_objectness_logits, pred_anchor_deltas, images.image_sizes
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/detectron2/modeling/proposal_generator/rpn.py", line 470, in predict_proposals
    self.training,
  File "/home/karthik/miniconda3/envs/fda6/lib/python3.6/site-packages/detectron2/modeling/proposal_generator/proposal_utils.py", line 104, in find_top_rpn_proposals
    "Predicted boxes or scores contain Inf/NaN. Training has diverged."
FloatingPointError: Predicted boxes or scores contain Inf/NaN. Training has diverged.

(fda6) karthik@viml16:~/adaptive_teacher/umt_adaptive_teacher/adaptive_teacher$ python train_net.py      --num-gpus 3      --config configs/faster_rcnn_R101_cross_clipart_b4.yaml      OUTPUT_DIR output/exp_cityscapes